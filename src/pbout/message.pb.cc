// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msg {

namespace {

const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* Body_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Body_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  Header_descriptor_ = file->message_type(0);
  static const int Header_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, sm_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, action_id_),
  };
  Header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      -1,
      -1,
      sizeof(Header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
      -1);
  Body_descriptor_ = file->message_type(1);
  static const int Body_offsets_[1] = {
  };
  Body_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Body_descriptor_,
      Body::default_instance_,
      Body_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _extensions_),
      sizeof(Body),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _internal_metadata_),
      -1);
  Msg_descriptor_ = file->message_type(2);
  static const int Msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, body_),
  };
  Msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Msg_descriptor_,
      Msg::default_instance_,
      Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _has_bits_[0]),
      -1,
      -1,
      sizeof(Msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Body_descriptor_, &Body::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Msg_descriptor_, &Msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete Header::default_instance_;
  delete Header_reflection_;
  delete Body::default_instance_;
  delete Body_reflection_;
  delete Msg::default_instance_;
  delete Msg_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\003msg\"I\n\006Header\022\017\n\007versio"
    "n\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\r\n\005sm_id\030\003 \002(\r\022\021\n\t"
    "action_id\030\004 \001(\r\"\r\n\004Body*\005\010d\020\220N\";\n\003Msg\022\033\n"
    "\006header\030\001 \002(\0132\013.msg.Header\022\027\n\004body\030\002 \001(\013"
    "2\t.msg.Body", 171);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  Header::default_instance_ = new Header();
  Body::default_instance_ = new Body();
  Msg::default_instance_ = new Msg();
  Header::default_instance_->InitAsDefaultInstance();
  Body::default_instance_->InitAsDefaultInstance();
  Msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Header::kVersionFieldNumber;
const int Header::kTypeFieldNumber;
const int Header::kSmIdFieldNumber;
const int Header::kActionIdFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Header)
}

void Header::InitAsDefaultInstance() {
}

Header::Header(const Header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Header)
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  type_ = 0u;
  sm_id_ = 0u;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:msg.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Header*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, action_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sm_id;
        break;
      }

      // required uint32 sm_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sm_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sm_id_)));
          set_has_sm_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }

      // optional uint32 action_id = 4;
      case 4: {
        if (tag == 32) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Header)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 sm_id = 3;
  if (has_sm_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sm_id(), output);
  }

  // optional uint32 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->action_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Header)
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Header)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 sm_id = 3;
  if (has_sm_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sm_id(), target);
  }

  // optional uint32 action_id = 4;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->action_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Header)
  return target;
}

int Header::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_version()) {
    // required uint32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_sm_id()) {
    // required uint32 sm_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sm_id());
  }

  return total_size;
}
int Header::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 sm_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sm_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 action_id = 4;
  if (has_action_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Header* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sm_id()) {
      set_sm_id(from.sm_id());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  std::swap(version_, other->version_);
  std::swap(type_, other->type_);
  std::swap(sm_id_, other->sm_id_);
  std::swap(action_id_, other->action_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// required uint32 version = 1;
bool Header::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Header::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void Header::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void Header::clear_version() {
  version_ = 0u;
  clear_has_version();
}
 ::google::protobuf::uint32 Header::version() const {
  // @@protoc_insertion_point(field_get:msg.Header.version)
  return version_;
}
 void Header::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:msg.Header.version)
}

// required uint32 type = 2;
bool Header::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Header::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Header::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Header::clear_type() {
  type_ = 0u;
  clear_has_type();
}
 ::google::protobuf::uint32 Header::type() const {
  // @@protoc_insertion_point(field_get:msg.Header.type)
  return type_;
}
 void Header::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:msg.Header.type)
}

// required uint32 sm_id = 3;
bool Header::has_sm_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Header::set_has_sm_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Header::clear_has_sm_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Header::clear_sm_id() {
  sm_id_ = 0u;
  clear_has_sm_id();
}
 ::google::protobuf::uint32 Header::sm_id() const {
  // @@protoc_insertion_point(field_get:msg.Header.sm_id)
  return sm_id_;
}
 void Header::set_sm_id(::google::protobuf::uint32 value) {
  set_has_sm_id();
  sm_id_ = value;
  // @@protoc_insertion_point(field_set:msg.Header.sm_id)
}

// optional uint32 action_id = 4;
bool Header::has_action_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Header::set_has_action_id() {
  _has_bits_[0] |= 0x00000008u;
}
void Header::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void Header::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
 ::google::protobuf::uint32 Header::action_id() const {
  // @@protoc_insertion_point(field_get:msg.Header.action_id)
  return action_id_;
}
 void Header::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
  // @@protoc_insertion_point(field_set:msg.Header.action_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Body::Body()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Body)
}

void Body::InitAsDefaultInstance() {
}

Body::Body(const Body& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Body)
}

void Body::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Body::~Body() {
  // @@protoc_insertion_point(destructor:msg.Body)
  SharedDtor();
}

void Body::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Body::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Body_descriptor_;
}

const Body& Body::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Body* Body::default_instance_ = NULL;

Body* Body::New(::google::protobuf::Arena* arena) const {
  Body* n = new Body;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Body::Clear() {
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Body)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    if ((800u <= tag && tag < 80000u)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_,
                                  mutable_unknown_fields()));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Body)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Body)
  return false;
#undef DO_
}

void Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Body)
  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Body)
}

::google::protobuf::uint8* Body::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Body)
  // Extension range [100, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 10000, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Body)
  return target;
}

int Body::ByteSize() const {
  int total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Body::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Body* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Body>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Body::MergeFrom(const Body& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Body::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Body::CopyFrom(const Body& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Body::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Body::Swap(Body* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Body::InternalSwap(Body* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata Body::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Body_descriptor_;
  metadata.reflection = Body_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Body

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Msg::kHeaderFieldNumber;
const int Msg::kBodyFieldNumber;
#endif  // !_MSC_VER

Msg::Msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Msg)
}

void Msg::InitAsDefaultInstance() {
  header_ = const_cast< ::msg::Header*>(&::msg::Header::default_instance());
  body_ = const_cast< ::msg::Body*>(&::msg::Body::default_instance());
}

Msg::Msg(const Msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg.Msg)
}

void Msg::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:msg.Msg)
  SharedDtor();
}

void Msg::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete body_;
  }
}

void Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_descriptor_;
}

const Msg& Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Msg* Msg::default_instance_ = NULL;

Msg* Msg::New(::google::protobuf::Arena* arena) const {
  Msg* n = new Msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Msg::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      if (header_ != NULL) header_->::msg::Header::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::msg::Body::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.Msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msg.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional .msg.Body body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.Msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.Msg)
  return false;
#undef DO_
}

void Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.Msg)
  // required .msg.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .msg.Body body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->body_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.Msg)
}

::google::protobuf::uint8* Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Msg)
  // required .msg.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // optional .msg.Body body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->body_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Msg)
  return target;
}

int Msg::ByteSize() const {
  int total_size = 0;

  // required .msg.Header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }
  // optional .msg.Body body = 2;
  if (has_body()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->body_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Msg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Msg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::msg::Header::MergeFrom(from.header());
    }
    if (from.has_body()) {
      mutable_body()->::msg::Body::MergeFrom(from.body());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  if (has_body()) {
    if (!this->body_->IsInitialized()) return false;
  }
  return true;
}

void Msg::Swap(Msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg::InternalSwap(Msg* other) {
  std::swap(header_, other->header_);
  std::swap(body_, other->body_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_descriptor_;
  metadata.reflection = Msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Msg

// required .msg.Header header = 1;
bool Msg::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Msg::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Msg::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Msg::clear_header() {
  if (header_ != NULL) header_->::msg::Header::Clear();
  clear_has_header();
}
const ::msg::Header& Msg::header() const {
  // @@protoc_insertion_point(field_get:msg.Msg.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::msg::Header* Msg::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::msg::Header;
  }
  // @@protoc_insertion_point(field_mutable:msg.Msg.header)
  return header_;
}
::msg::Header* Msg::release_header() {
  clear_has_header();
  ::msg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Msg::set_allocated_header(::msg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Msg.header)
}

// optional .msg.Body body = 2;
bool Msg::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Msg::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
void Msg::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
void Msg::clear_body() {
  if (body_ != NULL) body_->::msg::Body::Clear();
  clear_has_body();
}
const ::msg::Body& Msg::body() const {
  // @@protoc_insertion_point(field_get:msg.Msg.body)
  return body_ != NULL ? *body_ : *default_instance_->body_;
}
::msg::Body* Msg::mutable_body() {
  set_has_body();
  if (body_ == NULL) {
    body_ = new ::msg::Body;
  }
  // @@protoc_insertion_point(field_mutable:msg.Msg.body)
  return body_;
}
::msg::Body* Msg::release_body() {
  clear_has_body();
  ::msg::Body* temp = body_;
  body_ = NULL;
  return temp;
}
void Msg::set_allocated_body(::msg::Body* body) {
  delete body_;
  body_ = body;
  if (body) {
    set_has_body();
  } else {
    clear_has_body();
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Msg.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

// @@protoc_insertion_point(global_scope)
